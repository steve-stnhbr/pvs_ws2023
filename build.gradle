plugins {
    id 'java'
    id 'idea'
}

repositories {
    jcenter()
    maven {
        url 'https://maven.scijava.org/content/repositories/public/'
    }
    flatDir {
        dirs 'game/agents'
    }
}

dependencies {
    def dl4j_master_version = '1.0.0-M2.1'
    implementation group: 'at.ac.tuwien.ifs.sge', name: 'sge', version: '1.0.2'
    implementation group: 'at.ac.tuwien.ifs.sge', name: 'sge-risk', version: '1.0.2'
    implementation group: 'hu.webarticum', name: 'tree-printer', version: '2.1.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'net.bytebuddy:byte-buddy:1.11.18'
    //implementation 'cisd:jhdf5:19.04.1'
    //implementation 'org.deeplearning4j:deeplearning4j-core:' + dl4j_master_version
    //implementation 'org.nd4j:nd4j-native-platform:' + dl4j_master_version
    implementation name: 'mctsagent'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    processResources.exclude('agents/**')
    processResources.exclude('games/**')
    processResources.exclude('sge.jar')
    manifest {
        attributes 'Sge-Type': 'agent'
        attributes 'Agent-Class': 'at.ac.tuwien.ifs.sge.agent.risk.RiskItAgent'
        attributes 'Agent-Name': 'RiskItForTheBiscuit'
    }
}

tasks.register('generateAgents', JavaExec) {
    println("Generating agents")
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'at.ac.tuwien.ifs.sge.agent.risk.AgentGenerator'
    args = ['build/libs/RiskItForTheBiscuit.jar']
}

tasks.register('copyAgents', Copy) {
    // check if generate input is set
    var generateInput = project.hasProperty('generate')

    if (generateInput) {
        println("Generating input")
        dependsOn 'generateAgents'
    }

    dependsOn 'processResources'
    from 'out/generated/' // Replace with the actual path to your source folder
    into "src/main/resources/agents" // Target the resources directory
}

tasks.register("buildPerfTest", Jar) {
    var copyAgents = project.hasProperty('copyAgents')
    if (copyAgents) {
        //dependsOn 'copyAgents'
    }

    dependsOn 'classes', 'processResources'
    zip64 = true
    println("Packaging performance test")
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // Include compiled classes
    from sourceSets.main.output

    // Include resources from the resources folder
    from sourceSets.main.resources

    // Include files from the classpath (e.g., dependencies)
    from configurations.compileClasspath

    manifest {
        attributes 'Main-Class': 'at.ac.tuwien.ifs.sge.agent.risk.test.PerformanceTestCommand'
        attributes 'Manifest-Version': '1.0'
    }
    archiveFileName.set("PerfTest.jar")
    destinationDirectory.set(file("out/artifacts/PerfTest"))
}

def agents = fileTree('game/agents').include('*.jar').collect { it.getName()}

agents.each { agent ->
    def agentName = agent.substring(0, agent.indexOf('.'))
    tasks.register("play${agentName}Match", JavaExec) {
        dependsOn 'build'
        description = 'Build the application and execute another JAR file with arguments'
        classpath = files("game/sge-1.0.2-exe.jar")
        jvmArgs '-Xmx2g'
        args 'match', 'game/sge-risk-1.0.2-exe.jar', "game/agents/$agent", 'build/libs/RiskItForTheBiscuit.jar', '-c', '500', '--time-unit=MILLISECONDS'
    }
}
